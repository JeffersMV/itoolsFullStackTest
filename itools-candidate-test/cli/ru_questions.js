'use strict';

module.exports = [
    {
        type: 'list',
        name: 'Q1',
        message: 'Язык JavaScript является подвидом языка Java – верно?',
        choices: [
            'Да',
            'Нет',
            'Наоборот, Java – подвид JavaScript'
        ]
    },
    {
        type: 'list',
        name: 'Q2',
        message: 'Что такое ECMAScript?',
        choices: [
            'Язык программирования',
            'Переработанная реализация Javascript',
            'Спецификация языка Javascript'
        ]
    },
    {
        type: 'list',
        name: 'Q3',
        message: 'JavaScript это - ?',
        choices: [
            'Объектно-ориентированный язык программирования',
            'Функциональный язык программирования',
            'Аспектно-ориентированный язык программирования',
            'Прототипно-ориентированный язык программирования',
            'Событийно-ориентированный язык программирования',
            'Все выше перечисленое верно'
        ]
    },
    {
        type: 'list',
        name: 'Q4',
        message: 'JavaScript это - ?',
        choices: [
            'Компилируемый язык',
            'JIT-компилируемый язык',
            'Интерпретируемый язык',
            'Препроцессор',
            'Все ответы верны'
        ]
    },
    {
        type: 'list',
        name: 'Q5',
        message: 'Создатель языка программирования JavaScript?',
        choices: [
            'Райан Дал',
            'Адам Абронс',
            'Брендан Эйх',
            'Марк Цукерберг',
            'Алан Кокс',
            'Дан Абрамов'
        ]
    },
    {
        type: 'list',
        name: 'Q6',
        message: 'Что делает оператор `===` ?',
        choices: [
            'Сравнивает по ссылке, а не по значению',
            'Сравнивает без приведения типа',
            'Нет такого оператора'
        ]
    },
    {
        type: 'list',
        name: 'Q7',
        message: 'Какой вариант вызова `try..catch` являются синтаксически верными в JavaScript?',
        choices: [
            'try { ... } catch { ... }',
            'try { ... } catch { ... } finally { ... }',
            'Все выше перечисленое верно',
            'В JavaScript не поддерживается try..catch'
        ]
    },
    {
        type: 'list',
        name: 'Q8',
        message: '`use strict` - это ?',
        choices: [
            'Директива интерпретатора',
            'Флаг, который позволяет легче находить ошибки и предотвращает их появления',
            'Более строгий вариант JavaScript',
            'Режим введенный в ECMAScript 5',
            'Все выше перечисленое верно'
        ]
    },
    {
        type: 'list',
        name: 'Q9',
        message: 'Объект XMLHttpRequest - ?',
        choices: [
            'Дает возможность браузеру делать HTTP-запросы к серверу без перезагрузки страницы',
            'Функция, принимающая в качестве аргументов другие функции или возвращающая другую функцию в качестве результата',
            'Техника, позволяющая легче находить ошибки и предотвращает их появления',
            'Все выше перечисленое верно'
        ]
    },
    {
        type: 'list',
        name: 'Q10',
        message: 'Чему равен typeof null в режиме `use strict` ?',
        choices: [
            'null',
            'undefined',
            'object',
            'string'
        ]
    },
    {
        type: 'list',
        name: 'Q11',
        message: 'Вызов setTimeout(func, 0); вызовет func …',
        choices: [
            'сразу после setTimeout, до следующей строки кода',
            'сразу после текущего скрипта, когда браузер сможет выполнить JavaScript',
            'ровно через 4 миллисекунды',
            'через 4 миллисекунды или больше, в зависимости от пожеланий браузера'
        ]
    },
    {
        type: 'list',
        name: 'Q12',
        message: 'Сколько параметров можно передать функции?',
        choices: [
            'Ровно столько, сколько указано в определении функции',
            'Сколько указано в определении функции или меньше',
            'Сколько указано в определении функции или больше',
            'Любое количество'
        ]
    },
    {
        type: 'list',
        name: 'Q13',
        message: 'На что влияет описание DOCTYPE в начале документа?',
        choices: [
            'На внешний валидатор при проверке соответствия стандарту',
            'На отображение, работу CSS-свойств',
            'На наличие и отсутствие некоторых свойств в DOM',
            'На особенности работы XmlHttpRequest',
            'DOCTYPE - атавизм, он ни на что не влияет'
        ]
    },
    {
        type: 'list',
        name: 'Q14',
        message: 'Какой AJAX-транспорт позволит отправить файл на сервер без перезагрузки страницы?',
        choices: [
            'Только использование фреймов(IFrame)',
            'XmlHttpRequest',
            'Тэг SCRIPT',
            'Невозможно ввиду ограничений безопасности javascript'
        ]
    },
    {
        type: 'list',
        name: 'Q15',
        message: 'В какой кодировке XmlHttpRequest отправляется на сервер ?',
        choices: [
            'В той, какую укажем в заголовке запроса',
            'В кодировке страницы',
            'Всегда в UTF-8',
            'В той, какую захочет получить сервер',
            'Как повезет...'
        ]
    },
    {
        type: 'list',
        name: 'Q16',
        message: 'Event loop - это?',
        choices: [
            'Цикл проверяющий наличие событий в очереди событий',
            'Цикл который начинает обход только после определенного события',
            'Функция, вызывающая саму себя',
            'Событие, которое вызывает сомо себя',
            'Все выше перечисленое верно'
        ]
    },
    {
        type: 'list',
        name: 'Q17',
        message: 'JavaScript - ?',
        choices: [
            'Однопоточный язык программирования',
            'Многопоточный язык программирования',
            'Однопоточный, но есть возможность запуска потока по средствам Web Worker',
            'Однопоточный, но есть возможность запуска потока по средствам child_process'
        ]
    },
    {
        type: 'list',
        name: 'Q18',
        message: 'Каррирование - это ?',
        choices: [
            'Техника, позволяющая легче находить ошибки и предотвращает их появления',
            'Преобразование функции от многих аргументов в функцию, берущую свои аргументы по одному',
            'Резервное хранилище свойств и методов объекта, автоматически используемое при поиске',
            'Все выше перечисленое верно'
        ]
    },
    {
        type: 'list',
        name: 'Q19',
        message: 'Функция высшего порядка - это ?',
        choices: [
            'Фукнция, вызывающая другие функции',
            'Глобальная функция',
            'Функция, принимающая в качестве аргументов другие функции или возвращающая другую функцию в качестве результата',
            'Все выше перечисленое верно'
        ]
    },
    {
        type: 'list',
        name: 'Q20',
        message: 'Web Workers - это ?',
        choices: [
            'API браузера которое позволяет выполнять многопотоковые вычисления',
            'Web разработчики',
            'Режим введенный в ECMAScript 5',
            'Все выше перечисленое верно'
        ]
    },
    {
        type: 'list',
        name: 'Q21',
        message: 'Hoisting - это ?',
        choices: [
            'Всплытие события',
            'Более строгий вариант JavaScript',
            'Всплытие переменных объявленных в функции',
            'Все выше перечисленое верно'
        ]
    },
    {
        type: 'list',
        name: 'Q22',
        message: 'Декоратор - ?',
        choices: [
            'Обёртка над функцией, которая модифицирует её поведение',
            'Функция, принимающая в качестве аргументов другие функции или возвращающая другую функцию в качестве результата',
            'Структурный шаблон проектирования, предназначенный для динамического подключения дополнительного поведения',
            'Все выше перечисленое верно'
        ]
    },
    {
        type: 'list',
        name: 'Q23',
        message: 'Promise - это?',
        choices: [
            'Предоставляют удобный способ организации асинхронного кода',
            'Обёртка над функцией, которая модифицирует её поведение',
            'Объект, который хранит собственное состояние',
            'Монада',
            'Все выше перечисленое верно'
        ]
    },
    {
        type: 'list',
        name: 'Q24',
        message: 'Что из нижеперечисленного является архитектурным шаблоном проектирования?',
        choices: [
            'Model-View-Controller',
            'Model-View-Presenter',
            'Model-View-ViewModel',
            'Flux',
            'Все выше перечисленое верно'
        ]
    },
    {
        type: 'list',
        name: 'Q25',
        message: 'Верно ли, что null == undefined?',
        choices: [
            'Да',
            'Нет',
            'Когда как'
        ]
    },
    {
        type: 'list',
        name: 'Q26',
        message: 'Что такое Node.js?',
        choices: [
            'Программная платформа, основанная на движке V8',
            'Среда исполнения JavaScript',
            'Набор библиотек позволяющий создавать веб-сервера',
            'Программа написанная на С++',
            'Все ответы верны'
        ]
    },
    {
        type: 'list',
        name: 'Q27',
        message: 'Есть ли разница между выражениями? - !!( a && b ) и (a && b)',
        choices: [
            'Да',
            'Нет',
            'В первом выражении ошибка, что еще за `!!` ??'
        ]
    },
    {
        type: 'list',
        name: 'Q28',
        message: 'Какая арифметическая операция приводит к ошибке в JavaScript?',
        choices: [
            'Деление на ноль',
            'Умножение числа на строку',
            'Корень из отрицательного числа',
            'Никакая из вышеперечисленных'
        ]
    },
    {
        type: 'list',
        name: 'Q29',
        message: 'Что такое Representational State Transfer?',
        choices: [
            'Это шаблон проектирования',
            'Это JavaScript библиотека',
            'Это архитектурный стиль взаимодействия компонентов',
            'Это спецификация HTTP',
            'Нет правильного ответа'
        ]
    },
    {
        type: 'list',
        name: 'Q30',
        message: 'Что такое WebIDL?',
        choices: [
            'Спецификация DOM',
            'Спецификация WebGL',
            'Спецификация описывающая взаимодействие JavaScript и WebGL',
            'Спецификация языка ECMAScript',
            'Спецификация описывающая взаимодействие DOM и ECMAScript'
        ]
    },
    {
        type: 'list',
        name: 'Q31',
        message: 'Какой из нижеперечисленных фреймворков не является Node.js-фреймворком?',
        choices: [
            'express.js',
            'hapi.js',
            'ext.js',
            'koa',
            'sails'
        ]
    },
    {
        type: 'list',
        name: 'Q32',
        message: 'Что такое Замыкания?',
        choices: [
            'Функции, ссылающиеся на другие функции',
            'Функции, ссылающиеся на независимые переменные',
            'Функции, ссылающиеся на переменные',
            'Функции, которые уже были выполнены'
        ]
    },
    {
        type: 'list',
        name: 'Q33',
        message: 'Какие вы знаете альтернативы sessionStorage для хранения данных на клиенте?',
        choices: [
            'localStorage',
            'sessionStorage',
            'WebSQL',
            'IndexedDB',
            'Все из вышеперечисленного'
        ]
    },
    {
        type: 'list',
        name: 'Q34',
        message: 'Какой из следующих вариантов наследования в JavaScript верный?',
        choices: [
            'B.prototype = new A()',
            'B.prototype = Object.create(A.prototype)',
            'B.prototype = A.prototype',
            'B.prototype = Object.create(A)',
            'B.prototype = Object.assign(new A())'
        ]
    },
    {
        type: 'list',
        name: 'Q35',
        message: 'Какая техника применяется в JavaScript для проверки реализации объектом требуемого интерфейса?',
        choices: [
            'typeof',
            'facebook flow',
            'duck typing',
            'instanceof',
            '[[Class]]'
        ]
    },
    {
        type: 'list',
        name: 'Q36',
        message: 'Какого метода нет в протоколе HTTP?',
        choices: [
            'POST',
            'TURN',
            'CONNECT',
            'GET',
            'OPTIONS',
            'DELETE',
            'PATCH',
            'TRACE'
        ]
    },
    {
        type: 'list',
        name: 'Q37',
        message: 'Какой из следующих типов Stream отсутствует в Node.js?',
        choices: [
            'Readable',
            'Writable',
            'Reverse',
            'Duplex',
            'Transform'
        ]
    },
    {
        type: 'list',
        name: 'Q38',
        message: 'Что из списка ниже не является JavaScript препроцессором?',
        choices: [
            'Babel',
            'TypeScript',
            'LiveScript',
            'Dart',
            'CoffeeScript'
        ]
    },
    {
        type: 'list',
        name: 'Q39',
        message: 'Что из списка ниже не является CSS препроцессором?',
        choices: [
            'SASS',
            'PostCSS',
            'SCSS',
            'LESS',
            'Stylus'
        ]
    },
    {
        type: 'list',
        name: 'Q40',
        message: 'Каким образом в JavaScript можно вызвать функцию с определенным контекстом?',
        choices: [
            'apply',
            'call',
            'Все вышеперечисленное верно',
            'Нет такой возможности'
        ]
    },
    {
        type: 'list',
        name: 'Q41',
        message: 'Что выведет в консоль следующий код `console.log((function(a, b) {}).length);` ?',
        choices: [
            '0',
            '1',
            '2',
            'undefined'
        ]
    },
    {
        type: 'list',
        name: 'Q42',
        message: 'Что такое CommonJS?',
        choices: [
            'Спецификация для RequireJS',
            'Группа, которая проектирует и стандартизирует различные JavaScript API',
            'Асинхронное определение модуля',
            'Все ответы верны'
        ]
    },
    {
        type: 'list',
        name: 'Q43',
        message: 'Что из списка не является JavaScript библиотекой?',
        choices: [
            'Angular',
            'Grails',
            'React',
            'Ember',
            'Backbone'
        ]
    },
    {
        type: 'list',
        name: 'Q44',
        message: 'Какого типа компонентов в React нет?',
        choices: [
            'StatelessFunctional',
            'PureComponent',
            'Controller',
            'Component'
        ]
    },
    {
        type: 'list',
        name: 'Q45',
        message: 'Какой из объектов не входит в список стандартных встроенных в JavaScript?',
        choices: [
            'WeakMap',
            'Array',
            'HashMap',
            'Set',
            'Map'
        ]
    },
    {
        type: 'list',
        name: 'Q46',
        message: 'Как расшифровывается MEAN?',
        choices: [
            'MariaDB Electron Axio.js Node.js',
            'MongoDB Express.js Angular.js Node.js',
            'MySQL Ember.js AppJet NW.js'
        ]
    },
    {
        type: 'list',
        name: 'Q47',
        message: 'Какие из следующих баз данных не являются NoSQL?',
        choices: [
            'MongoDB',
            'CouchDB',
            'Oracle',
            'Amazon Dynamo'
        ]
    },
    {
        type: 'list',
        name: 'Q48',
        message: 'Какая директива отсутствует в стандартном наборе Angular.js?',
        choices: [
            'ng-app',
            'ng-bind',
            'ng-sql',
            'ng-model',
            'ng-repeat'
        ]
    },
    {
        type: 'list',
        name: 'Q49',
        message: 'Какой из следующих тегов появился только в HTML5?',
        choices: [
            'article',
            'td',
            'script',
            'div',
            'br'
        ]
    },
    {
        type: 'list',
        name: 'Q50',
        message: 'Что такое JSON?',
        choices: [
            'Текстовый формат обмена данными',
            'Способ описания объектов JavaScript',
            'Элемент технологии AJAX',
            'Все вышеперечисленное верно'
        ]
    },
    {
        type: 'list',
        name: 'Q51',
        message: 'Какой особенностью обладает let?',
        choices: [
            'Не происходит поднятие (hoisting)',
            'Область видимости ограничивается блоком',
            'Область видимости только в одной итерации цикла',
            'Все варианты верны'
        ]
    },
    {
        type: 'list',
        name: 'Q52',
        message: 'Что такое "this" в JavaScript?',
        choices: [
            'Ключевое слово, предназначенное для доступа к текущему объекту из метода',
            'Контекст вызова функции',
            'Значение window в глобальной области',
            'Все варианты ответов верны'
        ]
    },
    {
        type: 'list',
        name: 'Q53',
        message: 'Для чего служит встроенный метод bind?',
        choices: [
            'Для привязки контекста к функции',
            'Для создания новой функции путём фиксирования аргументов уже существующей',
            'Для привязки аргументов функции',
            'Все варианты ответов верны'
        ]
    },
    {
        type: 'list',
        name: 'Q54',
        message: 'Для чего нужны вендорные префиксы?',
        choices: [
            'Для поддержки специфических свойств, доступных в определённых браузерах',
            'Для поддержки новых свойств в старых браузерах',
            'Для стилизации псевдоэлементов',
            'Для подключения шрифтов',
            'Нет верных вариантов ответа'
        ]
    },
    {
        type: 'list',
        name: 'Q55',
        message: 'Для чего нужны псевдоклассы?',
        choices: [
            'Для добавления изображения на страницу',
            'Для генерирования содержимого, которого нет в исходном коде текста',
            'Для задания стилей элементов не определённых в дереве элементов документа',
            'Для изменения стиля элементов в зависимости от их динамического состояния',
            'Для центрирования блоков'
        ]
    },
    {
        type: 'list',
        name: 'Q56',
        message: 'Свойство float...',
        choices: [
            'Определяет, по какой стороне будет выравниваться элемент',
            'Служит для центрирования элементов',
            'Служит для выравнивания текста в строке',
            'Добавляет отступы с двух сторон'
        ]
    },
    {
        type: 'list',
        name: 'Q57',
        message: 'Что делает элемент со свойством position:absolute ?',
        choices: [
            'Игнорирует свойство padding родителя',
            'Игнорирует свойство margin потомка',
            'Влияет на размер родителя',
            'Нет правильных варинтов ответов'
        ]

    }
];